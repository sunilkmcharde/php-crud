<?php defined('BASEPATH') or exit('No direct script access allowed');class Crud_elements{             private $objCURD;    private $CURD_Table;        private $CURD_Short_Code;    private $CURD_Element;    private $CURD_ELEMENT_TYPE;        private $CURD_ELEMENT_SETTINGS;        private $CURD_FORM_DATA;        private $field_type;        //private $CURD_HIDDEN_ELEMENT;    public function __construct()    {         global $db;        $this->db = $db;                /*         * Assign zero to calculate the numbers of different input type elements exists in the form.         * This setting for manage Js code for calendor and other advance input elements,         * who required put additional js in the form page.          */        $this->CURD_ELEMENT_TYPE['date'] = 0;               $this->CURD_ELEMENT_TYPE['datetime'] = 0;        $this->CURD_ELEMENT_TYPE['daterange'] = 0;        $this->CURD_ELEMENT_TYPE['timepicker'] = 0;        $this->CURD_ELEMENT_TYPE['colorpicker'] = 0;        $this->CURD_ELEMENT_TYPE['editor'] = 0;        $this->CURD_ELEMENT_TYPE['input_mask'] = 0;                /*         * Flag for to display manage element setting button.         */        $this->CURD_ELEMENT_SETTINGS = false;                /*         * Flag for to set hidden input element as textbox where we need to display hidden elements.(Mostly for Primary Id)         */        $this->CURD_DISPLAY_HIDDEN_ELEMENTS = false;                /*         * Flag for to manage inline settings in crud masterform display In settiong.         * Like: In Insert, In Update and In List.(Toggle Checkbox)         */        $this->CURD_FORM_INLINE_SETTINGS = false; //Logic yet not written            }        public function set_element_settings($flag=false) {        $this->CURD_ELEMENT_SETTINGS = $flag;    }        public function display_hidden_elements($flag=false) {        $this->CURD_DISPLAY_HIDDEN_ELEMENTS = $flag;    }        public function display_form_inline_settings($flag=false) {        $this->CURD_DISPLAY_HIDDEN_ELEMENTS = $flag;    }        public function set_table($table_name) {                $this->CURD_Table = $table_name;     }        public function set_short_code($short_code) {                $this->CURD_Short_Code = $short_code;     }        public function set_form_data($formdata) {                $this->CURD_FORM_DATA = $formdata;     }        public function get_element_type_counts() {                return $this->CURD_ELEMENT_TYPE;    }    public function curdForm(array $objCURD, $element_settings='') {                $this->objCURD = $objCURD;                $this->CURD_ELEMENT_SETTINGS = empty($element_settings) ? $this->CURD_ELEMENT_SETTINGS : $element_settings;                $this->crudform = '';                if(is_array($this->objCURD)) :                        foreach ($this->objCURD as $key => $objCurdElement) :                                 //Display Hidden elements if set true.                if($this->CURD_DISPLAY_HIDDEN_ELEMENTS === true){                    if($objCurdElement['field_type'] == 'hidden') {                        $objCurdElement['field_type'] = 'text';                    }                }                            if($objCurdElement['field_type']=='date') {                    ++$this->CURD_ELEMENT_TYPE['date'];                }                elseif($objCurdElement['field_type']=='datetime') {                     ++$this->CURD_ELEMENT_TYPE['datetime'];                }                elseif($objCurdElement['field_type']=='daterange') {                     ++$this->CURD_ELEMENT_TYPE['daterange'];                }                elseif($objCurdElement['field_type']=='timepicker') {                     ++$this->CURD_ELEMENT_TYPE['timepicker'];                }                            if($objCurdElement['field_type'] == 'hidden') {                    $this->crudform .= '<div class="form-group">'. $this->getInputElement($objCurdElement);                    $this->crudform .= '</div>';                } else {                                        $required = ($objCurdElement['is_required']) ? ' <span class="text-danger">*</span>' : '';                        $this->crudform .= '<div class="row clearfix">                    <div class="col-lg-3 col-md-3 col-sm-4 col-xs-4 form-control-label">                        <label for="'.$objCurdElement['field_name'].'">'. $objCurdElement['field_label'] . $required .'</label>                    </div>                    <div class="col-lg-5 col-md-5 col-sm-4 col-xs-4">                        <div class="form-group">                            <div class="form-line">'                                .$this->getInputElement($objCurdElement).                           ' </div>                        </div>                    </div>                    <div class="col-lg-4 col-md-4 col-sm-4 col-xs-4 text-danger" id="error_'. $objCurdElement['field_name'].'">';                                        if($this->CURD_ELEMENT_SETTINGS === true) {                        $this->crudform .= '<a class="btn btn-primary btn-xs" onclick="setForm(\''.$objCurdElement['id'].'\', \''.$objCurdElement['am_table_name'].'\')" data-toggle="modal" data-target="#myElementModal"><i class="fa fa-gear"></i></a>';                    }                                $this->crudform .= '</div>                    </div>';                            }//end else.                            endforeach;        endif;        return $this->crudform;            }//end function    public function getInputElement(array $objCurdElement)     {        $element = '';        $this->CURD_Element = $objCurdElement;        $this->field_type = $field_type = $this->CURD_Element['field_type'];        switch ($field_type) {            case 'hidden':            case 'email':            case 'password':            case 'text':              return  $this->getInputText();                break;            case 'number':                                return  $this->getInputNumber();                                break;            case 'select':            case 'select_multiple':            case 'select_filter':                return  $this->getSelectBox($field_type);                break;                        case 'textarea':                                return  $this->getTextarea();                                break;            case 'checkbox':            case 'radio':                return  $this->getOptionButtons($this->CURD_Element['field_type']);                break;                        case 'date':            case 'datetime':            case 'daterange':            case 'datetimerange':                return $this->getCalendor($this->CURD_Element['field_type']);                break;                        case 'time':            case 'timepicker':                return $this->getTimeInput();                break;                        case 'file':            case 'file_multiple':                                return $this->getInputFile($this->CURD_Element['field_type']);                                break;                        default:                break;        }    }    private function getCalendor($type='date' ) {        $Calendor = ' <div class="input-group '.$type.'">                        <div class="input-group-addon bg-gray">                          <i class="fa fa-calendar"></i>                        </div>';                $num = $this->CURD_ELEMENT_TYPE[$type];                switch ($type) {            case 'date':                $id = 'datepicker_' . $num;                break;                        case 'datetime':                $id = 'datetimepicker_' . $num;                break;                        case 'daterange':                $id = 'daterangepicker_' . $num;                break;            default:                break;        }                $elementname = $this->CURD_Element['field_name'];                $fieldValue = !empty($this->CURD_FORM_DATA->$elementname) ? $this->CURD_FORM_DATA->$elementname : $this->haveDefaultValue($elementname);                $field_value = ($fieldValue === false) ? '' : ' value="'.$fieldValue.'" ';                    $Calendor .= '<input type="text" class="form-control pull-right '.$this->CURD_Element['field_name'].'" name="'.$this->CURD_Element['field_name'].'" id="'.$id.'" '.$field_value.' />';              return  $Calendor .= '  </div>';    }        private function getTimeInput() {               $num = $this->CURD_ELEMENT_TYPE['timepicker'];       $id = 'timepicker_' . $num;       $elementname = $this->CURD_Element['field_name'];       $fieldValue = !empty($this->CURD_FORM_DATA->$elementname) ? $this->CURD_FORM_DATA->$elementname : $this->haveDefaultValue($elementname);               $field_value = ($fieldValue === false) ? '' : ' value="'.$fieldValue.'" ';                $time_element = '<!-- time Picker -->             <div class="bootstrap-timepicker">                <div class="input-group">                    <input type="text" name="'.$this->CURD_Element['field_name'].'" id="'.$id.'" class="form-control timepicker" '.$field_value.' />                    <div class="input-group-addon  bg-gray">                      <i class="fa fa-clock-o"></i>                    </div>                </div>            </div>';               return $time_element;            }    private function getInputFile($type='file' ) {        $is_multiple = ($type=='file_multiple') ? 'multiple' : '';                $elementname = $this->CURD_Element['field_name'];                $fieldValue = !empty($this->CURD_FORM_DATA->$elementname) ? '<label>'.$this->CURD_FORM_DATA->$elementname . '</label>' : '';                $element  = '<input type="file" style="display: none;" '.$is_multiple.' name="'.$elementname.'" ';                $element .= ($this->CURD_Element['is_required']) ? ' required = "required" ' : '';                $element .= $this->_input_attr_set();                    $element .=  ' />';                $inputFile =    '<div class="input-group input-group-file">                            <input type="text" class="form-control" readonly />                            <label class="input-group-btn">                                <span class="btn btn-default bg-gray">                                    Browse&hellip; '.$element.'                                </span>                            </label>                                                        </div>'.$fieldValue;                return $inputFile;     }    private function getOptionButtons($type='radio') {      // $json_options = ($type == 'radio') ? $this->CURD_Element['static_dropdown_options'] : $this->CURD_Element['checkbox_options'];        $json_options = $this->CURD_Element['static_dropdown_options'];               $radioButtons = $selected = '';         if(!empty($json_options))        {            $arrOption = json_decode($json_options, true);                         $elementname = $this->CURD_Element['field_name'];                        if(isset($this->CURD_FORM_DATA->$elementname) && $this->CURD_FORM_DATA->$elementname != '') {                            $fieldValue = $this->CURD_FORM_DATA->$elementname;            } else {                $fieldValue = $this->haveDefaultValue($elementname);            }                       if(is_array($arrOption)) :                $i=0;                foreach ($arrOption as $value => $key)                {                                        $selected = ($fieldValue == $value) ? ' checked= "checked" ' : '';                                        $i++;                    $colClass = (($i%2)==0) ? 'width:48%; margin-left:4%;' : 'width:48%;';                    $radioButtons  .= '<label class="input-group option-button  pull-left" style="'.$colClass.'">';                                        $radioButtons  .= '<span class="input-group-addon bg-gray">';                            $radioButtons .= '<input type="'.$this->CURD_Element['field_type'].'" value="'.$value.'" '.$selected.' ' . $this->_input_attr_set() . ' /> ';                     $radioButtons .= '</span><span class="form-control">'.$key.'</span>';                                                                 $radioButtons .= '</label>';                 }                             endif;        }                return $radioButtons;    }    private function getSelectBox($fieldType)  {                $multiple = ($fieldType == 'select_multiple') ? ' multiple="multiple" data-role="materialtags" ' : '';                $selectBox = '<select class="form-control" '.$multiple.' ' . $this->_input_attr_set();        if($this->CURD_Element['is_required']) {             $selectBox .= ' required = "required" >';        } else {            $selectBox .= ' >';        }//else                $selectBox .= '<option value="">--Select One--</option>';                    $elementname = $this->CURD_Element['field_name'];                $fieldValue = (isset($this->CURD_FORM_DATA->$elementname) && $this->CURD_FORM_DATA->$elementname != '') ? $this->CURD_FORM_DATA->$elementname  : $this->haveDefaultValue($elementname);                    $selectBox .= $this->_select_options($fieldValue);        $selectBox .= '</select>';                    return $selectBox;    }     private function getInputText() {                 $elementname = $this->CURD_Element['field_name'];                $fieldValue = !empty($this->CURD_FORM_DATA->$elementname) ? $this->CURD_FORM_DATA->$elementname : $this->haveDefaultValue($elementname);                $field_value = ($fieldValue === false) ? '' : ' value="'.$fieldValue.'" ';                $placeholder = (empty($this->CURD_Element['placeholder'])) ? $this->CURD_Element['field_label'] : $this->CURD_Element['placeholder'];                $element  = '<input class="form-control" type="'.$this->CURD_Element['field_type'].'" placeholder="'.$placeholder.'" ';               $element .= ($this->CURD_Element['is_required']) ? ' required = "required" ' : '';                $element .= $this->_input_attr_set();                    $element .= $field_value. ' />';        return $element;    }        private function getTextarea() {                $elementname = $this->CURD_Element['field_name'];                $fieldValue = !empty($this->CURD_FORM_DATA->$elementname) ? $this->CURD_FORM_DATA->$elementname : $this->haveDefaultValue($elementname);                $field_value = ($fieldValue === false) ? '' : $fieldValue;                $placeholder = (empty($this->CURD_Element['placeholder'])) ? $this->CURD_Element['field_label'] : $this->CURD_Element['placeholder'];                $element = '<textarea class="form-control" placeholder="'.$placeholder.'" ';        $element .= $this->_input_attr_set();        $element .=  ' >'.$field_value.'</textarea>';        return $element;    }    private function getInputNumber() {                 $elementname = $this->CURD_Element['field_name'];                $fieldValue = !empty($this->CURD_FORM_DATA->$elementname) ? $this->CURD_FORM_DATA->$elementname : $this->haveDefaultValue($elementname);                $field_value = ($fieldValue === false) ? '' : ' value="'.$fieldValue.'" ';                $placeholder = (empty($this->CURD_Element['placeholder'])) ? $this->CURD_Element['field_label'] : $this->CURD_Element['placeholder'];                        $element = '<input class="form-control" maxlength="'.$this->CURD_Element['maxlength'].'" type="number"  placeholder="'.$placeholder.'" ';        $element .= $this->_input_attr_set();        $element .=  ' onkeyup="if(!$.isNumeric(this.val()) { this.value==\'\'; return false; }" ';                $element .= $this->CURD_Element['other_attributes'];                $element .= $field_value. '  />';        return $element;    }    private function _select_options($selectedId='') {                $options = '';               if($this->CURD_Element['is_foreign_key']){                               //                   if(isset($this->CURD_Element['foreign_table_conditions']) && is_array($this->CURD_Element['foreign_table_conditions'])) {//                        $this->db->where($this->CURD_Element['foreign_table_conditions']);//                   }                      $result = $this->db->select([$this->CURD_Element['foreign_value_field'], $this->CURD_Element['foreign_label_field']])                   ->order_by($this->CURD_Element['foreign_label_field'])                   ->get($this->CURD_Element['foreign_table_name'] )                   ->result_array();                       if(is_array($result)){               foreach ($result as $key => $row) {                   $selected = ($selectedId == $row[$this->CURD_Element['foreign_value_field']]) ? ' selected= "selected" ' : '';                   $options .= '<option value="'.$row[$this->CURD_Element['foreign_value_field']].'" '.$selected.'>'.$row[$this->CURD_Element['foreign_label_field']].'</option>';               }           }       } else {       //Not a foriegn Key then Apply Static Combo Options.                          $json_options = $this->CURD_Element['static_dropdown_options'];                          if(!empty($json_options))             {                $arrOption = json_decode($json_options, true);                  if(is_array($arrOption)) :                    foreach ($arrOption as $value => $lable) {                                    $selected = ($selectedId == $value) ? ' selected= "selected" ' : '';                        $options .= '<option value="'.$value.'" '.$selected.'>'.$lable.'</option>';                    }                               endif;             }                  }//end else.               return $options;    }        private function _input_attr_set(){        if($this->CURD_Element['validation_rules']) {            $attributes['validation_rules'] = $this->CURD_Element['validation_rules'];        }        if($this->CURD_Element['field_name'])         {                        if($this->field_type == 'select_multiple')  {                 $attributes['name'] =  $this->CURD_Element['field_name'].'[]';            } else {                $attributes['name'] =  $this->CURD_Element['field_name'];            }                $attributes['id']   =  $this->CURD_Element['field_name'];        }                 if(is_array($attributes)) {                        $attrib = '';                        foreach ($attributes as $key => $value) {                $attrib .= " $key =\"$value\" ";            }        }        return $attrib;    }        public function getCrudElementsCOntrolls($dataType='varchar') {                $controlls['validationRuleIsUnique'] = false;                $controlls['validationRulesArr']     = ['required','alpha','alpha_numeric','alpha_numeric_spaces','alpha_dash','numeric','integer','decimal',                                                    'is_natural','valid_url','valid_ip','valid_email'];        $controlls['userDefineValidationRulesArr'] = [                                                'matches'=>'text',                                                'regex_match'=>'text',                                                'differs'=>'text',                                                'min_length'=>'number',                                                'max_length'=>'number',                                                'exact_length'=>'number',                                                'greater_than'=>'number',                                                'greater_than_equal_to'=>'number',                                                'less_than'=>'number',                                                'less_than_equal_to'=>'number',                                        ];        $controlls['formElementTypeArr']     = ['text','hidden','textarea', 'select','select_multiple','radio','checkbox','password','email','file','file_multiple','date','timepicker','datetime','daterange','range','number'];                    switch (strtoupper($dataType)) {                        case 'TINYINT':            case 'SMALLINT':            case 'MEDIUMINT':            case 'INT':            case 'BIGINT':            case 'BIT':            case 'BOOLEAN':            case 'SERIAL':                $controlls['formElementTypeArr']     = ['text','hidden', 'select','radio','checkbox','number'];                $controlls['validationRulesArr']     = ['required','numeric','integer'];                $controlls['userDefineValidationRulesArr'] = [                                                            'min_length'=>'number',                                                            'max_length'=>'number',                                                            'exact_length'=>'number',                                                            'greater_than'=>'number',                                                            'greater_than_equal_to'=>'number',                                                            'less_than'=>'number',                                                            'less_than_equal_to'=>'number',                                                    ];                break;                        case 'DECIMAL':            case 'FLOAT':            case 'REAL':            case 'DOUBLE':                $controlls['validationRulesArr']     = ['required','decimal'];                $controlls['userDefineValidationRulesArr'] = [                                                'matches'=>'text',                                                                        'min_length'=>'number',                                                'max_length'=>'number',                                                'exact_length'=>'number',                                                'greater_than'=>'number',                                                'greater_than_equal_to'=>'number',                                                'less_than'=>'number',                                                'less_than_equal_to'=>'number',                                        ];                        break;            case 'DATE':                case 'DATETIME':            case 'TIMESTAMP':            case 'TIME':            case 'TIMEPICKER':            case 'YEAR':                            $controlls['validationRulesArr']             = ['required'];                        $controlls['userDefineValidationRulesArr']   = ['greater_than'=>'number', 'less_than'=>'number' ];                $controlls['formElementTypeArr']             = ['text','date','datetime','timepicker'];                break;                        case 'ENUM':            case 'TEXT':            case 'BINARY':            case 'VARBINARY':                     $controlls['validationRuleIsUnique'] = true;                break;                        case 'CHAR':            case 'VARCHAR':            case 'TINYTEXT':                        case 'MEDIUMTEXT':            case 'LONGTEXT':                        default:                $controlls['validationRuleIsUnique'] = true;                            break;        }                return $controlls;              }//end method        public function haveDefaultValue($fieldName){               $elementInfo = $this->objCURD[$fieldName];              if($elementInfo['default_value'] == ''){           if($elementInfo['data_type'] == 'int') {               return '0';           }        } else {            return $elementInfo['default_value'];                }              return false;    }      }//end class. ?>