<?phpclass baseclass {    public $conn;    public $db_name;    public $db_tables;    public $num_rows = 0;    public $fetch_rows;    public $last_insert_id;    public $sql_error;        private $stmt;    private $sqlQuery;    public function __construct() {        $sql_error = '';        $this->DB_Connect();    }    public function DB_Connect() {        $this->db_name = DB_NAME;        try {            $this->conn = new PDO("mysql:host=" . HOSTNAME . ";dbname=" . DB_NAME, DB_USER, DB_PASSWORD);            // set the PDO error mode to exception            $this->conn->setAttribute(PDO::ATTR_ERRMODE, PDO::ERRMODE_EXCEPTION);            //  echo "<div class='alert alert-success'>Connected successfully</div>";         } catch (PDOException $e) {            $this->sql_error =  "<div class='alert alert-danger'>Connection failed: " . $e->getMessage() . "</div>";        }    }        /**     *      * @param string $tablename     * @param array $data (Associate Array ['fieldname'=>'fieldvalue'])     * @return int (last insert id in success, Error message in failed.)     *      */    public function insert($tablename, array $data) {        if (is_array($data)) {            foreach ($data as $key => $value) {                $tableFields[] = trim($key);                $valueReff[] = '?';                 $tableFieldsValues[] = $value;            }//end foreach.             $sqlFields = join(', ', $tableFields);            $sqlValuesReff = join(',', $valueReff);                   }        // use exec() because no results are returned        try {                       $sql = "INSERT INTO " . $tablename . " (" . $sqlFields . ") VALUES (" . $sqlValuesReff . ") ";                        $stmt = $this->conn->prepare($sql);                       $result = $stmt->execute($tableFieldsValues);                      if ($result) {                                /* close statement */               // $stmt->free_result();                                return $this->last_insert_id = $this->conn->lastInsertId();            } else {                $this->sql_error = $this->conn->error;            }                } catch (PDOException $e) {            $this->sql_error = "<div class='alert alert-danger'>Connection failed: " . $e->getMessage() . "</div>";        }                    }        /**      * @param string $tablename      * @param array $updateWhere  (Associate Array ['fieldname'=>'value'])     * @param array $data (Associate Array ['fieldname'=>'fieldvalue'])     * @return boolean (true in success , Error Message in failed.)     *      */     public function update($tablename, array $updateWhere , array $data) {        if (is_array($data)) {            foreach ($data as $key => $value) {                                $updateFields[] =  trim($key)."=?";                $updateValues[] = $value;                             }//end foreach.             $sqlUpdates = join(', ', $updateFields);         }                if(is_array($updateWhere))        {            foreach ($updateWhere as $key => $value) {                                $wheres[] =  trim($key)." = ? ";                $updateValues[] = $value;            }//end foreach.                        $updateWhereCondition = ' WHERE ' . join(' AND ', $wheres);          }       $sql = "UPDATE " . $tablename . " SET " . $sqlUpdates . $updateWhereCondition ;       try {            // Prepare statement            $stmt = $this->conn->prepare($sql);            // execute the query            $stmt->execute($updateValues);            $result = $stmt->rowCount();                                     return true;                          }        catch(PDOException $e)        {            echo '<div class="alert alert-danger">Sql Error:'.$sql . "<br>" . $e->getMessage().'</div>';            exit;        }             }    /**      * @param string $tablename     * @param array $deleteWhere     * @return boolean (true in success , Error Message in failed.)     */    public function delete($tablename, array $deleteWhere ) {                 if(is_array($deleteWhere))        {            foreach ($deleteWhere as $key => $value) {                                $wheres[] =  trim($key)." = ? ";                $deleteBy[] = $value;            }//end foreach.                        $deleteWhereCondition = ' WHERE ' . join(' AND ', $wheres);          }       $sql = "DELETE FROM " . $tablename .  $deleteWhereCondition ;       try {            // Prepare statement            $stmt = $this->conn->prepare($sql);            // execute the query            $stmt->execute($deleteBy);            $result = $stmt->rowCount();                         return true;                          }        catch(PDOException $e)        {            echo '<div class="alert alert-danger">Sql Error:'.$sql . "<br>" . $e->getMessage().'</div>';            exit;        }             }        /**     *      * @param array $data     */    public function select(array $data) {         $sqlSelect = " * ";        if(isset($data['select'])) {            if (is_array($data['select']) && count($data['select'])) {                $sqlSelect = join(',', $data['select']);            }            if (is_string($data['select']) && !empty($data['select'])) {                $sqlSelect = $data['select'];            }        }        if (isset($data['table']) && !empty($data['table'])) {            $table_name = $data['table'];        }        $sqlQuery = "SELECT " . $sqlSelect . " FROM " . $table_name;        $sqlWhereAnd = "";        if (isset($data['where'])) {            if (is_array($data['where']) && count($data['where'])) {                foreach ($data['where'] as $key => $value) {                    $where[] = " $key = '$value' ";                }                $sqlWhereAnd = ' WHERE (' . join(' AND ', $where) . ') ';            }            if (is_string($data['where']) && !empty($data['where'])) {                $sqlWhereAnd = ' WHERE ' . $data['where'];            }            $sqlQuery .= $sqlWhereAnd;        }        $sqlWhereOr = "";        if (isset($data['whereOr'])) {            if (is_array($data['whereOr']) && count($data['whereOr'])) {                foreach ($data['whereOr'] as $key => $value) {                    $where[] = " $key = '$value' ";                }                $sqlWhereOr = ' OR (' . join(' OR ', $where) . ') ';            }            if (is_string($data['whereOr']) && !empty($data['whereOr'])) {                $sqlWhereOr = ' OR (' . $data['whereOr'] . ') ';            }            $sqlQuery .= $sqlWhereOr;        }        if (isset($data['groupby']) && !empty($data['groupby'])) {            $sqlQuery .= " GROUP BY " . $data['groupby'];        }        if (isset($data['orderby']) && !empty($data['orderby'])) {            $sqlQuery .= " ORDER BY " . $data['orderby'];        }        if (isset($data['limit']) && !empty($data['limit'])) {            $sqlQuery .= " LIMIT " . $data['limit'];        }        if (isset($data['sqlQuery'])) {            $sqlQuery = $data['sqlQuery'];        }        $this->sqlQuery = $sqlQuery;                if(isset($data['runquery']) && $data['runquery']===true)        {            $this->_query_run($this->sqlQuery);        }    }    /**     *      * @param string $sqlQuery     */    public function query($sqlQuery) {                $this->sqlQuery = $sqlQuery;    }        /**     *      * @param string $sqlQuery     * @return boolin     */    public function set_query($sqlQuery) {                $this->sqlQuery = $sqlQuery;    }    /**     *      * @param string $sqlQuery     * @return voide     */    private function _query_run($sqlQuery) {        //echo $sqlQuery;        try {            $this->stmt = $this->conn->prepare($sqlQuery);            $this->stmt->execute();            $this->num_rows = $this->stmt->rowCount();            // set the resulting array to associative            $result = $this->stmt->setFetchMode(PDO::FETCH_ASSOC);                         return $result;        }        catch(PDOException $e) {            echo "Error: " . $e->getMessage();            return false;        }    }    /**     *      * @return int     */    public function numRows() {        return $this->num_rows;    }    /**     *      * @return array     */    public function fetchAll() {                if($this->_query_run($this->sqlQuery)) {                        return  $this->fetch_rows = $this->stmt->fetchAll();        }    }        /**     *      * @return type array     */    public function fetchRow() {                if($this->_query_run($this->sqlQuery)) {                        return  $this->fetch_rows = $this->stmt->fetch();        }    }    /**     *      * @param string $string     * @return string     */    protected function _to_label($string) {        $search = ['_', '-'];        $replace = ' ';        $string = str_replace($search, $replace, $string);        return ucwords($string);    }        /**     *      * @param string $string     * @return string     */    protected function _set_am_extra($string) {        return (in_array($string, $this->get_am_extra())) ? $string : 'general';    }        /**     *            * @return array     */    public function get_am_extra() {        return ['is_active', 'is_delete', 'created_at', 'updated_at', 'deleted_at'];    }    /**     * Auto load magic function end of object used.     */    public function __destruct() {                $conn = null;        unset($this->conn);        unset($this->num_rows);        unset($this->fetch_rows);        unset($this->last_insert_id);                unset($this->stmt);                unset($this->sqlQuery);    }    public function prepareInput($data , $trim_only=0) {                      $data = trim($data);                if($trim_only==0) {            $data = addslashes($data);            $data = htmlspecialchars($data);        }        return $data;    }                     public function sendMail(array $mailData )    {        //SMTP needs accurate times, and the PHP time zone MUST be set        //This should be done in your php.ini, but this is how to do it if you don't have access to that        date_default_timezone_set(TIMEZONE);               $mailForm       = $mailData['from'];        $mailFormName   = $mailData['from_name'];        $mailReply      = $mailData['reply'];        $mailReplyName  = $mailData['reply_name'];        $mailTo         = $mailData['to'];        $mailToName     = $mailData['to_name'];        $mailSubject    = $mailData['subject'];        $mailBody       = $mailData['body'];                    $mail = new PHPMailer;        $mail->SMTPDebug = 0;                   // Enable verbose debug output/*        $mail->isSMTP();                                      // Set mailer to use SMTP        $mail->Host = SMTP_SERVER;                          // Specify main and backup SMTP servers        $mail->SMTPAuth = true;                               // Enable SMTP authentication        $mail->Username = SMTP_USER;                        // SMTP username        $mail->Password = SMTP_PASSWORD;                           // SMTP password        $mail->SMTPSecure = 'no';                            // Enable TLS encryption, `ssl` also accepted        $mail->Port = 587;                                    // TCP port to connect to*/                $mail->isMail();                                // Set mailer to use SMTP        $mail->Host         = SMTP_SERVER;      // Specify main and backup SMTP servers        $mail->SMTPAuth     = true;                     // Enable SMTP authentication        $mail->Username     = SMTP_USER;      // SMTP username        $mail->Password     = SMTP_PASSWORD;           // SMTP password        $mail->SMTPSecure   = 'tls';                    // Enable TLS encryption, `ssl` also accepted        $mail->Port = 465;                              // TCP port to connect to                        $mail->setFrom(EMAIL_FROM, EMAIL_FROM_NAME);        $mail->addAddress($mailTo, $mailToName);                // Add a recipient        //$mail->addAddress('ellen@example.com');               // Name is optional        $mail->addReplyTo(REPLY_EMAIL, REPLY_NAME);        //$mail->addCC('cc@gmail.com');        //$mail->addBCC('bcc@example.com');        //$mail->addAttachment('/var/tmp/file.tar.gz');         // Add attachments        //$mail->addAttachment('/tmp/image.jpg', 'new.jpg');    // Optional name        $mail->isHTML(true);                                  // Set email format to HTML        $mail->Subject = $mailSubject;        $mail->Body    = $mailBody;        $mail->AltBody = 'This is the body in plain text for non-HTML mail clients';        if (!$mail->send()) {            echo "<div class='alert alert-danger'>Mailer Error: " . $mail->ErrorInfo ."</div>";            return false;        } else {            return true;        }            }             }?>