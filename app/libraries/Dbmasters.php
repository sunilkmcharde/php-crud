<?phpclass dbmasters {    public $db_table_structure;    public $db_table_name;    public $pry_key;    public $is_active_field;    public $is_delete_field;    public function __construct($tableName = '') {                 parent::__construct();         $this->db_table_structure = array();        $this->db_table_name = $tableName;        $this->pry_key = 'id';        $this->is_active_field = 'is_active';        $this->is_delete_field = 'is_delete';    }    public function get_db_tables() {//        $query = $this->db->where('TABLE_SCHEMA', $this->db->database)//                ->get('INFORMATION_SCHEMA.TABLES');                        $db_tables = $this->db->query("SELECT * FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_SCHEMA = '".$this->db->database."' AND TABLE_NAME NOT IN ('crud_%', 'am_%') ")->result_array();                   return $db_tables;        //        $this->print_array($db_tables);//        //        if(is_array($db_tables)){//            foreach ($db_tables as $key => $tableInfo) {//                $this->db_tables[$tableInfo['TABLE_NAME']] = $tableInfo;//            }//        }//        return $this->db_tables;    }/*    public function get_table_structure() {        if (empty($this->db_table_name))            return false;        $this->set_query('DESCRIBE ' . $this->db_table_name);        $this->db_table_structure = $this->fetchAll();        return $this->db_table_structure;    }    public function createAdminMasterForm() {        if (is_array($this->db_table_structure)) {            $am_form['table_name'] = $this->db_table_name;            $am_form['form_title'] = $this->_to_label($this->db_table_name);                        //If Table Exist In `am_forms` Form List.            $am_id=$this->_exists_am_form($this->db_table_name);                       if($am_id){                                return $this->insertElements($am_id);                            } else {                            $search_fields = '';                foreach($this->db_table_structure as $table) {                     if (isset($table['key']) && $table['key'] == 'PRI') {                        $am_form['id_field'] = $this->db_table_name;                    }                    if (isset($table['Field'])) {                         $am_extra = $this->_set_am_extra($table['Field']);                        if ($am_extra != 'general') {                            $am_form[$am_extra . '_field'] = $am_extra;                        }                        if (in_array(substr($table['Type'], 0, 4), ['varc', 'text', 'char'])) {                            $search_fields[] = $table['Field'];                        }                    }                }//end foreach                if (is_array($search_fields)) {                    $am_form['search_fields'] = join(',', $search_fields);                }                 $am_id = $this->insert(AM_FORMS, $am_form);                 return $this->insertElements($am_id);                            }//endelse.                    }//end if           }    public function insertElements($am_id) {         $am_elements['am_id'] = $am_id;        $am_elements['am_table_name'] = $this->db_table_name;        $elements = $index = 0;                $defineField = ['char'=>'text', 'varchar'=>'text', 'text'=>'editor', 'int'=>'text', 'time'=>'time', 'date'=>'date', 'datetime'=>'datetime', 'enum'=>'radio' ];                foreach ($this->db_table_structure as $table) {            $am_elements['field_name'] = $table['Field'];            $am_elements['field_label'] = $this->_to_label($table['Field']);                        //Check Elements is exists or not.            if($this->_am_element_exists($am_elements['field_name'])){                //If Master Table ELements Exists In Emaement Table                 continue;            }                        $TypeArr = explode('(', $table['Type']);                        if(is_array($TypeArr)) {                                $am_elements['data_type']       =  $TypeArr[0];                $am_elements['data_type_size']  = ($TypeArr[1])  ? addslashes( str_replace(["(",")"," ","unsigned" ], '',  $TypeArr[1])) : '';                                if($am_elements['data_type']=='enum') {                                        $static_options_arr = [];                    $enumOptions = str_replace(["(",")","'"], '', stripslashes($am_elements['data_type_size']));                    $enumOptionsArr = explode(',', $enumOptions);                                        foreach($enumOptionsArr as $key => $value) {                                                $valueKey = $value;                        if($value=='1') $valueKey = 'Yes';                        if($value=='0') $valueKey = 'No';                                     $static_options_arr[$valueKey] = ucfirst($value);                    }//end foreach.                                        $am_elements['static_dropdown_options'] = addslashes(json_encode($static_options_arr));                } else {                    $am_elements['static_dropdown_options'] = null;                }                            } else {                $am_elements['data_type'] =  $table['Type'];            }                        if(in_array( $am_elements['data_type'], ['char', 'varchar'] )) {                $am_elements['maxlength'] = $am_elements['data_type_size'];            } else {                $am_elements['maxlength'] = '';            }                        $field_type  = ($defineField[$am_elements['data_type']]) ? $defineField[$am_elements['data_type']] : 'text';                        $am_elements['field_type'] = ($table['Key'] == 'PRI') ? 'hidden' : $field_type;                        $am_elements['validation_rules'] = '';            $am_elements['is_primary_key']  = ($table['Key'] == 'PRI') ? 1 : 0;            $am_elements['default_value']   = $table['Default'];            $am_elements['include_in_insert'] = ($table['Key'] == 'PRI') ? 0 : 1;            $am_elements['include_in_update'] = 1;            $am_elements['display_in_list']  = 1;            $am_elements['can_update']       = ($table['Key'] == 'PRI') ? 0 : 1;            $am_elements['status_in_insert'] = ($table['Key'] == 'PRI') ? 'none' : 'default';            $am_elements['status_in_update'] = ($table['Key'] == 'PRI') ? 'hidden' : 'default';            $am_elements['am_extra']         = ($table['Key'] == 'PRI') ? 'id' : $this->_set_am_extra($table['Field']);            $am_elements['form_field_order'] = ++$index;            if (in_array(substr($table['Type'], 0, 4), ['varc', 'text', 'char'])) {                $am_elements['is_search_option'] = 1;            } else {                $am_elements['is_search_option'] = 0;            }                                    if ($this->insert(AM_ELEMENTS, $am_elements))             {                $elements++;            } else {                echo $this->sql_error;            }                    }//end foreach                    return $elements;    }    public function updateElements($requestData) {                extract($requestData);                          $result['status'] = 'SUCCESS';                    $am_elements['field_label']         = $field_label;            $am_elements['field_type']          = $field_type;            $am_elements['validation_rules']    = $validation_rules;                        $am_elements['is_required']         = $is_required;            $am_elements['is_foreign_key']      = $is_foreign_key;                        $am_elements['foreign_table_name']  = $am_elements['foreign_value_field']  =  $am_elements['foreign_label_field']  = '';                        if($is_foreign_key){                $am_elements['foreign_table_name']      = $foreign_table_name;                  $am_elements['foreign_value_field']     = $foreign_value_field;                 $am_elements['foreign_label_field']     = $foreign_label_field;            }                        if(in_array($field_type, ['select','radio','checkbox']) && $is_foreign_key == 0){                                if($static_dropdown_options_type == 'array') {                                        if(!empty($soids)){                        $soidsArr = explode(',', $soids);                        foreach($soidsArr as $soid){                            if($soid == 0) continue;                                                         $so_label[$soid] = trim($requestData['static_option_label_' . $soid]);                             $so_value[$soid] = trim($requestData['static_option_value_' . $soid]);                             if( $so_label[$soid]=='' ||  $so_value[$soid]=='')                            {                                $result['status'] = 'ERROR';                                $result['msg'].= '<li>Please fill the static options '.$soid.' row.</li>';                            } else {                               $soArray[$so_label[$soid]] = $so_value[$soid];                            }                                                    }//end foreach.                                                $am_elements['static_dropdown_options'] = json_encode($soArray);                                            } else {                        $result['status'] = 'ERROR';                        $result['msg']  .= '<li>Please enter the static options.</li>';                    }                                    }                if($static_dropdown_options_type == 'json') {                                        if($static_dropdown_options_json == ''){                        $result['status'] = 'ERROR';                        $result['msg']  .= '<li>Please enter the static options json format.</li>';                    }                    elseif(!is_array(json_decode($static_dropdown_options_json,true))){                        $result['status'] = 'ERROR';                        $result['msg'] .= '<li>Static options json invalid format.</li>';                    } else {                        $am_elements['static_dropdown_options'] = $static_dropdown_options_json;                    }//end else                }//end if.            }            $am_elements['default_value']       = $default_value;            $am_elements['include_in_insert']   = $include_in_insert;            $am_elements['include_in_update']   = $include_in_update;            $am_elements['display_in_list']     = $display_in_list;            //$am_elements['can_update']        = $can_update;            $am_elements['status_in_insert'] = $status_in_insert;            $am_elements['status_in_update'] = $status_in_update;            $am_elements['am_extra']         = $am_extra;            $am_elements['form_field_order']  = $form_field_order;            $am_elements['is_search_option']  = $is_search_option;                        $am_elements['is_filters_option'] = $is_filters_option;                        $am_elements['is_sorting_option'] = $is_sorting_option;                        $am_elements['maxlength'] = $maxlength;                        $am_elements['minlength'] = $minlength;                        if($result['status'] === 'SUCCESS') {                 // print_r($am_elements);                $queryResult = $this->update(AM_ELEMENTS, ['id'=>$id] , $am_elements);                $result['queryResult'] = $queryResult;                if($queryResult !== true) {                    $result['status'] = 'ERROR';                    $result['msg'] = $queryResult;                }            }                       return $result;    }        public function getAdminMasterElements($id = '') {                $this->select([            'select'    => '*',            'table'     => AM_ELEMENTS,            'where'     => ($id) ? ['id' => $id] : ['am_table_name' => $this->db_table_name],            'whereOr'   => '',            'groupby'   => '',            'orderby'   => 'form_field_order ASC',        ]);        return $this->fetchAll();    }        public function getFormElementTypeCount() {               $this->select([            'select'    => ' count( `id` ) AS num, `field_type` ',            'table'     => AM_ELEMENTS,            'where'     => ['am_table_name' => $this->db_table_name],            'whereOr'   => '',            'groupby'   => 'field_type',            'orderby'   => 'field_type ASC',        ]);        $resultArr = $this->fetchAll();                 if(is_array($resultArr)){            foreach ($resultArr as  $arr) {                if($arr['field_type']=='') continue;                                $curdElements[$arr['field_type']] = $arr['num'];            }        }                    return $curdElements;    }        public function getCURDElements($curd_type) {        switch ($curd_type) {            case 'create':                $whereCondition = ['am_table_name' => $this->db_table_name, 'include_in_insert' => '1'];                break;            case 'update':                $whereCondition = ['am_table_name' => $this->db_table_name, 'include_in_update' => '1'];                break;            case 'display':                $whereCondition = ['am_table_name' => $this->db_table_name, 'display_in_list' => '1'];                break;            default:                $whereCondition = ['am_table_name' => $this->db_table_name];                break;        }//end switch.        $this->select([            'select'    => '*',            'table'     => AM_ELEMENTS,            'where'     => $whereCondition,            'whereOr'   => '',            'groupby'   => '',            'orderby'   => 'form_field_order ASC',        ]);        return $this->fetchAll();    }    public function getAdminMastersFormList() {        $this->select([            'select' => ['id', 'table_name'],            'table' => AM_FORMS,            'where' => ['is_active' => 1],            'whereOr' => '',            'groupby' => '',            'orderby' => 'table_name ASC',        ]);        $rows = $this->fetchAll();                if(is_array($rows)){            foreach ($rows as $key => $tablename) {                $tableArr[$tablename['id']] = $tablename['table_name'];            }                        return $tableArr;        }    }            private function _exists_am_form($table_name) {                $this->select([            'select' => ['id', 'table_name'],            'table' => AM_FORMS,            'where' => ['table_name' => $table_name],            'limit' => '1',            'runquery' => true,        ]);                $rows = $this->fetchAll();                    if(is_array($rows[0])){                        return $rows[0]['id'];        }    }    public function getValidationRules($string = '') {        if (empty($string))            return false;        return '';    }        public function crudFormSubmit( $postData) {                    $crudSubmit = $postData['crud_submit'];        unset($postData['crud_submit']);                switch ($crudSubmit) {            case 'insert':                $this->crudFormInsert($postData);                break;            case 'update':               // $this->crudFormUpdate($postData);                break;            default:                break;                    }//end switch.             }          public function crudFormInsert(array $postData) {                foreach ($postData as $fieldName => $fieldValue) {           if($fieldValue=='') {              $fieldValue = $this->haveDefaultValue($fieldName);              if($fieldValue === false) continue;           }            $insertData[$fieldName] = $fieldValue;                    }//end foreach.                       if($insert_id = $this->insert($this->db_table_name, $insertData))         {            return $insert_id;        } else {            echo $this->sql_error;            return false;        }    }         public function haveDefaultValue($fieldName){               $elementInfo = $this->getElementInfo($fieldName);              if($elementInfo['default_value'] == ''){           if($elementInfo['data_type'] == 'int') {               return '0';           }        } else {            return $elementInfo['default_value'];                }              return false;    }        public function getElementInfo($fieldName, $selects=''){                if(empty($selects)) {            $selects = 'id, data_type, validation_rules, default_value';        }                $this->select([            'select'    => $selects,            'table'     => AM_ELEMENTS,            'where'     => ['am_table_name' => $this->db_table_name , 'field_name'=>$fieldName],             'limit'     => 1,        ]);        return $this->fetchRow();    }        private function _am_element_exists($fieldName){                $result = $this->getElementInfo($fieldName, $selects='id');                if(is_array($result)){            return $result['id'];        } else {            return false;        }    }    public function __destruct() {        parent::__destruct();        unset($this->db_table_structure);        unset($this->db_table_name);        unset($this->pry_key);    }*/}?>